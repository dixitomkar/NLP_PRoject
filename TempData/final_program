from itertools import chain
import nltk
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.preprocessing import LabelBinarizer
import sklearn

import nltk
import pandas as pd
sent=[]
a=pd.read_csv('t11', sep=" ", header = None) 

all_words=a.as_matrix()
import nltk.tag.stanford as st
PATH_TO_GZ = 'C:/Users/Oma/Desktop/Desktop/Fall 2016/NLP/project/tagset/tagger-master/dataset/stanford-ner/classifiers/english.all.3class.distsim.crf.ser.gz'
PATH_TO_JAR = 'C:/Users/Oma/Desktop/Desktop/Fall 2016/NLP/project/tagset/tagger-master/dataset/stanford-ner/stanford-ner.jar'
tagger = st.StanfordNERTagger(PATH_TO_GZ, PATH_TO_JAR) 

sent=[]
train_sents=[]

for i in range(0,100):
    #print(i)
    if(all_words[i][0]=='end_of_sentence'):
        train_sents.append(list(sent))
        sent=[]
    else:
        sent.append(all_words[i])
print("COmplete stage1")  


def word2features(sent, i):
    word = sent[i][0]
    postag = sent[i][1]
    temp=tagger.tag(word.split())[0][1]
    gazLoc="0"
    gazPer="0"
    gazOrg="0"
    print(word," " ,temp)
    if(temp=='ORGANIZATION'):
        gazOrg="1"
    if(temp=='LOCATION'):
        gazLoc="1"
    if(temp=='PERSON'):
        gazPer="1"
            
    
    features = [
        'bias',
        'word.lower=' + word.lower(),
        'word[-3:]=' + word[-3:],
        'word[-2:]=' + word[-2:],
        'word.isupper=%s' % word.isupper(),
        'word.istitle=%s' % word.istitle(),
        'word.isdigit=%s' % word.isdigit(),
        'postag=' + postag,
        'postag[:2]=' + postag[:2],
        'gazOrg=' + gazOrg,
        'gazLoc=' + gazLoc,
        'gazPer=' + gazPer,
    ]
    if i > 0:
        word1 = sent[i-1][0]
        postag1 = sent[i-1][1]
        features.extend([
            '-1:word.lower=' + word1.lower(),
            '-1:word.istitle=%s' % word1.istitle(),
            '-1:word.isupper=%s' % word1.isupper(),
            '-1:postag=' + postag1,
            '-1:postag[:2]=' + postag1[:2],
        ])
    else:
        features.append('BOS')
        
    if i < len(sent)-1:
        word1 = sent[i+1][0]
        postag1 = sent[i+1][1]
        features.extend([
            '+1:word.lower=' + word1.lower(),
            '+1:word.istitle=%s' % word1.istitle(),
            '+1:word.isupper=%s' % word1.isupper(),
            '+1:postag=' + postag1,
            '+1:postag[:2]=' + postag1[:2],
        ])
    else:
        features.append('EOS')
                
    return features


def sent2features(sent):
    return [word2features(sent, i) for i in range(len(sent))]

def sent2labels(sent):
    return [label for token, postag, label in sent]

def sent2tokens(sent):
    return [token for token, postag, label in sent]



